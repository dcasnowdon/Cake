.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.36.
.TH CAKE "1" "May 2013" "cake 3.0" "User Commands"
.SH NAME
cake - a C and C++ build tool that requires almost no configuration.
.SH SYNOPSIS
.B cake
[\fIcompilation args\fR] \fIfilename.cpp \fR[\fIapp args\fR]
.SH DESCRIPTION
cake generates and runs C and C++ executables with almost no configuration. To build a C or C++ program, type "cake filename.c" or "cake filename.cpp".
Cake uses the header includes to determine what other implementation (c,cpp) files are also required to be built and linked against.
Cake also recognises that developers need to build different variants of the same executable.  A variant is defined to be a compiler and optimisation combination.
Examples of variants are gcc46_release and clang_debug.
.SS "Source annotations:"
.IP
Embed these magic comments in your hpp and cpp files to give cake instructions on compilation and link flags.
.TP
//#CXXFLAGS=<flags>
Appends the given options to the compile step.
.TP
//#LINKFLAGS=<flags>
Appends the given options to the link step
.TP
//#GCC44_CXXFLAGS=<flags>
Appends the given options to the compile step when building with gcc 4.4.
.TP
//#GCC44_LINKFLAGS=<flags>
Appends the given options to the link step when building with gcc 4.4
.IP
If no variant specific annotations are found, then the global variants are also
searched. This allows default behaviour to be specified, while allowing
for a particular variant as well.
.SS "Environment:"
.IP
Environment variables can also be set, from lowest to highest priority, in /etc/cake.conf, ~/.cake.conf or directly in the shell.
.TP
CAKE_DEFAULT_VARIANT
Sets the default variant to use if \fB\-\-variant=\fR<some variant> is not specified on the command line
.TP
CAKE_<variant>_ID
Sets the prefix to the embedded source annotations and predefined build macro.
.TP
CAKE_<variant>_CPP
Sets the C preprocessor command.
.TP
CAKE_<variant>_CC
Sets the C compiler command.
.TP
CAKE_<variant>_CXX
Sets the C++ compiler command
.TP
CAKE_<variant>_LINKER
Sets the linker command.
.TP
CAKE_<variant>_CPPFLAGS
Sets the preprocessor flags for all c and cpp files in the build.
.TP
CAKE_<variant>_CFLAGS
Sets the compilation flags for all c files in the build.
.TP
CAKE_<variant>_CXXFLAGS
Sets the compilation flags for all cpp files in the build.
.TP
CAKE_<variant>_LINKFLAGS
Sets the flags used while linking.
.TP
CAKE_<variant>_TESTPREFIX
Sets the execution prefix used while running unit tests.
.TP
CAKE_<variant>_POSTPREFIX
Sets the execution prefix used while running post\-build commands.
.TP
CAKE_BINDIR
Sets the directory where all binary files will be created.
.TP
CAKE_OBJDIR
Sets the directory where all object files will be created.
.TP
CAKE_PROJECT_VERSION_CMD
Sets the command to execute that will return the version number of the project being built. cake then sets a macro equal to this version.
.SH OPTIONS

.TP
\fB\-\-help\fR
Shows this message.
.TP
\fB\-\-quiet\fR
Doesn't output progress messages.
.TP
\fB\-\-verbose\fR
Outputs the result of build commands (doesn't run make with \fB\-s\fR)
.TP
\fB\-\-cake\-debug\fR
Output extra cake specific info.
.TP
\fB\-\-config\fR
Specify the config file to use.
.TP
\fB\-\-bindir\fR
Specifies the directory to contain binary executable outputs. Defaults to 'bin'.
.TP
\fB\-\-objdir\fR
Specifies the directory to contain object intermediate files. Defaults to 'bin/obj'.
.TP
\fB\-\-generate\fR
Only runs the makefile generation step, does not build.
.TP
\fB\-\-build\fR
Builds the given targets (default).
.TP
\fB\-\-file\-list\fR
Print list of referenced files.
.TP
\fB\-\-output=\fR<filename>
Overrides the output filename.
.TP
\fB\-\-variant=\fR<vvv>
Reads the CAKE_<vvv>_CC, CAKE_<vvv>_CXXFLAGS and CAKE_<vvv>_LINKFLAGS
environment variables to determine the build flags.
Examples of variants are debug, release, gcc44_debug, gcc46_release.
.TP
\fB\-\-static\-library\fR
Build a static library rather than executable.  This is an alias for \fB\-\-LINKER=\fR"ar \fB\-src\fR"
.TP
\fB\-\-dynamic\-library\fR
Build a dynamic library rather than executable.  This is an alias for \fB\-\-append\-LINKFLAGS=\fR"\-shared"
.TP
\fB\-\-ID=\fR<id>
Sets the prefix to the embedded source annotations, and a predefined macro CAKE_${ID}
.TP
\fB\-\-CPP=\fR<preprocessor>
Sets the C preprocessor command.
.TP
\fB\-\-CC=\fR<compiler>
Sets the C compiler command.
.TP
\fB\-\-CXX=\fR<compiler>
Sets the C++ compiler command.
.TP
\fB\-\-LINKER=\fR<linker>
Sets the linker command.
.TP
\fB\-\-CPPFLAGS=\fR<flags>
Sets the preprocessor flags for all c and cpp files in the build.
.TP
\fB\-\-CFLAGS=\fR<flags>
Sets the compilation flags for all c files in the build.
.TP
\fB\-\-CXXFLAGS=\fR<flags>
Sets the compilation flags for all cpp files in the build.
.TP
\fB\-\-LINKFLAGS=\fR<flags>
Sets the flags used while linking.
.TP
\fB\-\-TESTPREFIX=\fR<cmd>
Runs tests with the given prefix, eg. "valgrind \fB\-\-quiet\fR \fB\-\-error\-exitcode\fR=\fI1\fR"
.TP
\fB\-\-POSTPREFIX=\fR<cmd>
Runs post execution commands with the given prefix, eg. "timeout 60"
.TP
\fB\-\-append\-CPPFLAGS=\fR...
Appends the given text to the CPPFLAGS already set.   Useful for adding search paths etc.
.TP
\fB\-\-append\-CFLAGS=\fR...
Appends the given text to the CFLAGS already set. Useful for adding search paths etc.
.TP
\fB\-\-append\-CXXFLAGS=\fR...
Appends the given text to the CXXFLAGS already set. Useful for adding search paths etc.
.TP
\fB\-\-append\-LINKFLAGS=\fR..
Appends the given text to the LINKFLAGS already set. Use for example with `wx\-config \fB\-\-libs\fR`
.TP
\fB\-\-bindir=\fR...
Overrides the directory where binaries are produced. 'bin/' by default.
.TP
\fB\-\-project\-version\-cmd=\fR...
Sets the command to execute that will return the version number of the project being built.
.TP
\fB\-\-include\-git\-root\fR
Walk up directory path to find .git directory. If found, add path as an include path.
This is enabled by default.
.TP
\fB\-\-no\-git\-root\fR
Disable the git root include.
.TP
\fB\-\-begintests\fR
Starts a test block. The cpp files following this declaration will
generate executables which are then run.
.TP
\fB\-\-endtests\fR
Ends a test block.
.TP
\fB\-\-beginpost\fR
Starts a post execution block. The commands given after this will be
run verbatim after each build. Useful for running integration tests,
or generating tarballs, uploading to a website etc.
.TP
\fB\-\-endpost\fR
Ends a post execution block.
.SH EXAMPLES

This command\-line generates bin/prime\-factoriser and bin/frobnicator in release mode.
It also generates several tests into the bin directory and runs them. If they are
all successful, integration_test.sh is run.
.IP
cake apps/prime\-factoriser.cpp apps/frobnicator.cpp \fB\-\-begintests\fR tests/*.cpp \fB\-\-endtests\fR \fB\-\-beginpost\fR ./integration_test.sh \fB\-\-variant\fR=\fIrelease\fR
.PP
To build a static  library of the get_numbers.cpp file in the example tests
.IP
cake \fB\-\-static\-library\fR tests/get_numbers.cpp
.PP
To build a dynamic library of the get_numbers.cpp file in the example tests
.IP
cake \fB\-\-dynamic\-library\fR tests/get_numbers.cpp
.SH OVERVIEW
cake generates and runs C and C++ executables with almost no configuration. To build a C or C++ program, type "cake filename.c" or "cake filename.cpp". 
Cake uses the header includes to determine what other implementation (c,cpp) files are also required to be built and linked against.
Cake also recognises that developers need to build different variants of the same executable.  A variant is defined to be a compiler and optimisation combination.
Examples of variants are gcc46_release and clang_debug.

.TP
Cake works off the same principles as Ruby on Rails. It will make your life easy if you don't arbitrarily name things. The main rules are:

1. All binaries end up in the bin directory, with the same base name as their source filename.

2. The implementation file for point.hpp should be called point.cpp. This is so cake can compile it and recursively hunt down its dependencies.

3. If a header or implementation file will not work without being linked with a certain flag, add a //#LINKFLAGS=myflag directly to the source code.

4. Likewise, if a special compiler option is needed, use //#CXXFLAGS=myflag.

5. Minimise the use of "-I" include flags. They make it hard not only for cake to generate dependencies, but also autocomplete tools like Eclipse.

6. Only gcc, and linux, is supported. Other tools could be added now, but it's not what I use.
.PP
Cake also works off a "pull" philosophy of building, unlike the "push" model of most build processes. Often, there is the monolithic build script that rebuilds everything. Users iterate over changing a file, relinking everything and then rerunning their binary. A hierarchy of libraries is built up and then linked in to the final executables. All of this takes a lot of time, particularly for C++.

In cake, you only pull in what is strictly necessary to what you need to run right now. Say, you are testing a particular tool in a large project, with a large base of 2000 library files for string handling, sockets, etc. There is simply no make file. You might want to create a build.sh for regression testing, but it's not essential.
.TP
The basic workflow is to simply type:

cake app.cpp && ./bin/app
.PP
Only the library cpp files that are needed, directly, or indictly to create ./bin/app are actually compiled. If you don't #include anything that refers to a library file, you don't pay for it. Also, only the link options that are strictly needed to generate the app are included. Its possible to do in make files, but such fine-level granularity is rarely set up in practice, because its too error-prone to do manually, or with recursive make goodness.
.SH "HOW IT WORKS"
Cake uses "gcc -MM -MF" to generate the header dependencies for the main.cpp file you specify at the command line. For each header file, it looks for an underlying implementation (c,cpp) file with the same name, and adds it to the build. Cake also reads the first 4k of each file for special comments that indicate needed link and compile flags.  Cake recurses through the dependencies of the cpp file, and uses this spidering to generate complete dependency information for the application. It then lazily generates a makefile, and finally calls make.
.SH "MAGIC COMMENTS"
.TP
Cake works very differently to other build systems, which specify a hierarchy of link flags and compile options, because cake ties the compiler flags directly to the source code. If you have compress.hpp that requires "-lzip" on the link line, add the following comment in the first 4K of the header file: //#LINKFLAGS=-lzip
.PP
Whenever the header is included (either directly or indirectly), the -lzip will be automatically added to the link step. If you stop using the header, for a particular executable, cake will figure that out and not link against it.
.TP
If you want to compile a cpp file with a particular optimization enabled, add, say: //#CXXFLAGS=-fstrict-aliasing
.PP
Because the code and build flags are defined so close to each other, its much easier to tweak the compilation locally.
.SH PERFORMANCE
Because cake generates a makefile to build the C++ file, cake is about as fast as a handrolled Makefile that uses the same lazily generated dependencies. A typical project takes 0.04 seconds to build if nothing is out of date, versus 2 seconds for, say, Boost.Build.

Cake also eliminates the redundant generation of static archive files that a more hierarchical build process would generate as intermediaries, saving the cost of running 'ar'.

Cake doesn't build all cpp files that you have checked out, only those strictly needed to build your particular binary, so you only pay for what you use. You should see an improvement on most projects, especially for incremental rebuilds.
.SH "INTEGRATING CAKE WITH A MAKEFILE"
To wrap cake in a Makefile, use dummy input targets that force a rebuild every time. Cake is fast so this is fine, it's just like doing a recursive make. This example handles 'make all' 'make test' 'make clean' etc.

all: release debug test
        cake src/program_to_build.cpp

release: FORCE
        cake src/program_to_build.cpp --variant=release

debug: FORCE
        cake src/program_to_build.cpp --variant=debug

test: FORCE
        cake --begintests test/*.cpp --endtests

clean: FORCE
        rm -rf bin

FORCE:
.SH "COMMON ERRORS"
Syntax error: Unterminated quoted string

This error can be caused by one of the "magic comments" (i.e., compile or link flags) having an unmatched quote.
.SH FILES
.TP
.I /etc/cake.conf
cake configuration file containing the default CAKE_* environment variables.
.TP
.I /usr/bin/cake
cake executable
.SH AUTHOR
.TP
cake was written by Zomojo Pty Ltd.  This manual page was generated using help2man.
.SH "SEE ALSO"
.TP
This information is repeated in the cake.1 manual page, README and partly in cake --help.
